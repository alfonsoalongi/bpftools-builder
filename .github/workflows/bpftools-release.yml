name: Build & Release bpftools-arm64

on:
  push:
    tags: [ 'v*' ]          # parte SOLO su tag tipo v0.1.0
  workflow_dispatch:        # avvio manuale su main

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240          # 4 h di margine

    steps:
    # 0. Repo host (può essere vuoto, serve solo la cartella .github/)
    - uses: actions/checkout@v4

    # 1. +8 GB di swap per evitare OOM nel link di LLVM
    - name: Add swap
      run: |
        sudo fallocate -l 8G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -h

    # 2. Clona ExtendedAndroidTools (shallow, ultimo commit main)
    - name: Clone ExtendedAndroidTools
      run: |
        git clone --depth 1 https://github.com/facebookexperimental/ExtendedAndroidTools.git src
        echo "SRC_DIR=$PWD/src" >> $GITHUB_ENV

    # 3. Dipendenze host identiche all’upstream
    - name: Install host dependencies
      run: sudo $SRC_DIR/scripts/jammy-install-deps.sh

    # 4. Scarica l’NDK (script upstream → crea ./android-ndk-r26b)
    - name: Download Android NDK (r26b)
      run: $SRC_DIR/scripts/download-ndk.sh

    # 5. Individua la cartella NDK appena scaricata
    - name: Set NDK_DIR env
      run: echo "NDK_DIR=$(ls -d $PWD/android-ndk-*/)" >> $GITHUB_ENV

    # 6. Compila bpftools per arm64 (THREADS limitato = meno RAM)
    - name: Build bpftools (arm64)
      working-directory: ${{ env.SRC_DIR }}
      run: |
        make bpftools NDK_PATH=${{ env.NDK_DIR }} NDK_ARCH=arm64 THREADS=4
        cp bpftools-arm64.tar.gz $GITHUB_WORKSPACE/

    # 7. SHA-256
    - name: Generate checksum
      run: |
        cd $GITHUB_WORKSPACE
        sha256sum bpftools-arm64.tar.gz > SHA256SUMS

    # 8. Allegati permanenti (solo se push è un tag v*)
    - name: Publish GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          bpftools-arm64.tar.gz
          SHA256SUMS
        generate_release_notes: true
